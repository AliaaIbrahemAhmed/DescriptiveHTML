/* LanguageTokens.java */
/* Generated By:JavaCC: Do not edit this line. LanguageTokens.java */
import java.io.StringReader;
import java.util.Vector;

public class LanguageTokens implements LanguageTokensConstants {
    static Vector<Element> inputs;
  /** Main entry point. */
  public static void main(String args[]) throws ParseException {/*
      */
        LanguageTokens.inputs = new Vector<>();
     StringReader in=new StringReader("ADD IMAGE WITH SOURCE \"https://www.w3schools.com/html/pic_trulli.jpg\"\n"+
                                       "ADD LINK WITH TEXT \"Email\" AND WITH LINK \"http://gmail.com\" AND WITH COLOR \"Green\"\n"+
                                     "ADD HEADING WITH TEXT \"Hello World\" AND WITH FONT \"Arial\" AND WITH COLOR \"Red\"\n"+
                                      "ADD HEADING WITH TEXT \"Hello World\"\n"+
                                     "ADD HEADING WITH TEXT \"Hello World\"\n"+
                                     "ADD PARAGRAPH WITH TEXT \"Welcome\" AND WITH FONT \"Arial\" AND WITH COLOR \"Red\"\n"+
                                      "ADD LINK WITH TEXT \"Search\" AND WITH LINK \"http://google.com\"\n"+
                                      "ADD LINK WITH TEXT \"Email\" AND WITH LINK \"http://gmail.com\" AND WITH COLOR \"Green\"\n"+
                                     "ADD PARAGRAPH WITH FONT \"Arial\" AND WITH TEXT \"Good bye\"");
        LanguageTokens parser=new LanguageTokens(in);
        HTML_Parser html_parser = new HTML_Parser();
        parser.Input();
        System.out.println(html_parser.html(inputs));
}

  static final public boolean Input() throws ParseException {Element element = new Element();
 String txt;
    try {
      jj_consume_token(create);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case img:{
        jj_consume_token(img);
element.setType("image");
        txt = FullSentence();
element.setText(txt);
        break;
        }
      case header:{
        jj_consume_token(header);
element.setType("header");
        Decorated_txt(element);
        break;
        }
      case para:{
        jj_consume_token(para);
element.setType("paragraph");
        Decorated_txt(element);
        break;
        }
      case url:{
        jj_consume_token(url);
element.setType("link");
        Decorated_url(element);
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 22:{
        jj_consume_token(22);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case create:{
          Input();
          break;
          }
        case 0:{
          jj_consume_token(0);
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case 0:{
        jj_consume_token(0);
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
System.out.println("TRUE");
    LanguageTokens.inputs.add(element);
    {if ("" != null) return true;}
    } catch (Exception e) {
System.out.println("FALSE");
    System.out.println(element.getType()+" color: "+element.getColor()+" font: "+element.getFont()+" text "+element.getText()+" url: "+element.getUrl());

    {if ("" != null) return false;}
    }
    throw new Error("Missing return statement in function");
}

  static final public String FullSentence() throws ParseException {String sentence;
    jj_consume_token(quote);
    label_1:
    while (true) {
      sentence = AlphaNumeric();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Number:
      case SmallLetter:
      case CapitalLetter:
      case Slash:
      case Dott:
      case Colon:
      case UnderScore:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(quote);
{if ("" != null) return sentence;}
    throw new Error("Missing return statement in function");
}

  static final public String AlphaNumeric() throws ParseException {String sentence = "";
String temp;
Token a;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SmallLetter:{
      label_2:
      while (true) {
        a = jj_consume_token(SmallLetter);
sentence+=a.image;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SmallLetter:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_2;
        }
      }
      break;
      }
    case CapitalLetter:{
      label_3:
      while (true) {
        a = jj_consume_token(CapitalLetter);
sentence+=a.image;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CapitalLetter:{
          ;
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          break label_3;
        }
      }
      break;
      }
    case Slash:{
      label_4:
      while (true) {
        a = jj_consume_token(Slash);
sentence+=a.image;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Slash:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_4;
        }
      }
      break;
      }
    case Dott:{
      label_5:
      while (true) {
        a = jj_consume_token(Dott);
sentence+=a.image;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Dott:{
          ;
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          break label_5;
        }
      }
      break;
      }
    case Colon:{
      label_6:
      while (true) {
        a = jj_consume_token(Colon);
sentence+=a.image;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Colon:{
          ;
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          break label_6;
        }
      }
      break;
      }
    case Number:{
      label_7:
      while (true) {
        a = jj_consume_token(Number);
sentence+=a.image;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case Number:{
          ;
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          break label_7;
        }
      }
      break;
      }
    case UnderScore:{
      label_8:
      while (true) {
        a = jj_consume_token(UnderScore);
sentence+=a.image;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case UnderScore:{
          ;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          break label_8;
        }
      }
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case Number:
      case SmallLetter:
      case CapitalLetter:
      case Slash:
      case Dott:
      case Colon:
      case UnderScore:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_9;
      }
      temp = AlphaNumeric();
sentence+=temp;
    }
{if ("" != null) return sentence;}
    throw new Error("Missing return statement in function");
}

  static final public void Decorated_txt(Element element) throws ParseException {int type;
 String txt;
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case text:{
        jj_consume_token(text);
type = 0;
        break;
        }
      case color:{
        jj_consume_token(color);
type = 1;
        break;
        }
      case font:{
        jj_consume_token(font);
type = 2;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case text:
      case color:
      case font:{
        ;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_10;
      }
    }
    txt = FullSentence();
switch (type){
        case 0:
            element.setText(txt);
            break;
        case 1:
            element.setColor(txt);
            break;
        case 2:
            element.setFont(txt);
            break;
        default:
            break;
    }
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_11;
      }
      jj_consume_token(AND);
      Decorated_txt(element);
    }
}

  static final public void Decorated_url(Element element) throws ParseException {int type;
String txt;
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case link:{
        jj_consume_token(link);
type = 0;
        break;
        }
      case text:{
        jj_consume_token(text);
type = 1;
        break;
        }
      case color:{
        jj_consume_token(color);
type = 2;
        break;
        }
      case font:{
        jj_consume_token(font);
type = 3;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case text:
      case color:
      case font:
      case link:{
        ;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_12;
      }
    }
    txt = FullSentence();
switch (type){
        case 0:
            element.setUrl(txt);
            break;
        case 1:
            element.setText(txt);
            break;
        case 2:
            element.setColor(txt);
            break;
        case 3:
            element.setFont(txt);
            break;
        default:
            break;
            }
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        break label_13;
      }
      jj_consume_token(AND);
      Decorated_url(element);
    }
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public LanguageTokensTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x3c,0x3,0x400001,0x3f8000,0x10000,0x20000,0x40000,0x80000,0x100000,0x8000,0x200000,0x3f8000,0x3f8000,0x1c0,0x1c0,0x800,0x3c0,0x3c0,0x800,};
	}

  /** Constructor with InputStream. */
  public LanguageTokens(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public LanguageTokens(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new LanguageTokensTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public LanguageTokens(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new LanguageTokensTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new LanguageTokensTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public LanguageTokens(LanguageTokensTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(LanguageTokensTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[23];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 19; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 23; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

    }
